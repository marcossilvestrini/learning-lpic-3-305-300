# -*- mode: ruby -*-
# vi: set ft=ruby :

Vagrant.configure("2") do |config|

  # SSH
  #config.ssh.insert_key = false
  config.ssh.connect_timeout = 300

  # BOX
  config.vm.box = "CONFIG_VM_BOX_PLACEHOLDER"

  ## GUEST CONFIG
  config.vbguest.auto_update = false
  config.vbguest.no_install = true
  config.vbguest.no_remote = true
  config.vm.box_download_insecure = true

  # LOCAL VARIABLES
  VM_NAME = "lpic3-topic-351"
  BOX_NAME = "CONFIG_VM_BOX_PLACEHOLDER"

  # MOUNTS
  config.vm.synced_folder ".", "/vagrant", disabled: true
  config.vm.synced_folder "../../scripts/", "/home/vagrant/scripts"
  config.vm.synced_folder "../../configs/", "/home/vagrant/configs"
  config.vm.synced_folder "../../security/", "/home/vagrant/security"

  # begin instance 1
  config.vm.define "#{VM_NAME}-instance-1" do |vm_config|

    # hostname
    vm_config.vm.hostname = "#{VM_NAME}-instance-1"

    # VMware Workstation configuration
    vm_config.vm.provider "vmware_workstation" do |vm|
      vm.linked_clone = true
      vm.clone_directory = "E:\\Servers\\VMWare\\#{VM_NAME}-instance-1"
      vm.whitelist_verified = true
      vm.gui = true
      #vm.vmx["virtualHW.version"] = "10"
      vm.vmx["displayName"] = "#{VM_NAME}-instance-1"
      vm.vmx["memsize"] = "8192"
      vm.vmx["numvcpus"] = "4"
      vm.vmx["cpuid.coresPerSocket"] = "1"
      vm.vmx["vhv.enable"] = "TRUE"  # Enable virtualization engine (nested virtualization)
      #vm.vmx["hypervisor.cpuid.v0"] = "FALSE"  # Ensure guest OS can see CPU features
      #vm.vmx["monitor.virtual_mmu"] = "hardware"  # Use hardware memory management unit
      #vm.vmx["monitor.virtual_exec"] = "hardware"  # Use hardware execution virtualization
    end

    # VirtualBox configuration
    vm_config.vm.provider "virtualbox" do |vb|
      vb.linked_clone = true
      vb.name = "#{VM_NAME}-instance-1"
      vb.memory = "2048"
      vb.cpus = 2
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      vb.customize ["modifyvm", :id, "--vrde", "off"]  # Disable VRDE
      vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
      vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
      vb.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
    end

    # Network configuration
    config.vm.network "public_network", ip: "192.168.0.130", netmask: "255.255.255.0", mode: "bridge", bridge: [
                                          "Intel(R) I211 Gigabit Network Connection",
                                          "MediaTek Wi-Fi 6 MT7921 Wireless LAN",
                                        ] ### NETWORK_CONFIG_PLACEHOLDER

    # cloud-init
    #vm_config.vm.provision "shell", name: "[cloud-init]", path: "../../scripts/commons/cloud-init.sh", privileged: false

    # Conditional provisioning scripts based on box name
    if BOX_NAME == "silvestrini-rocky9"
      vm_config.vm.provision "shell", name: "Rocky Provision", path: "../../scripts/rocky/test.sh", privileged: false
    elsif BOX_NAME == "silvestrini-ol9"
      vm_config.vm.provision "shell", name: "OL9 Provision", path: "../../scripts/ol9/test.sh", privileged: false
    elsif BOX_NAME == "gutehall/debian12"
      vm_config.vm.provision "shell", name: "Debian 12 Provision", path: "../../scripts/xen/debian.sh", privileged: false
    else
      raise "Unknown box name: #{BOX_NAME}"
    end
    #vm_config.vm.provision :reload
  end
  # end instance 1

  # begin instance 2
  config.vm.define "#{VM_NAME}-instance-2" do |vm_config|

    # hostname
    vm_config.vm.hostname = "#{VM_NAME}-instance-2"

    # VMware Workstation configuration
    vm_config.vm.provider "vmware_workstation" do |vm|
      vm.linked_clone = true
      vm.clone_directory = "E:\\Servers\\VMWare\\#{VM_NAME}-instance-2"
      vm.whitelist_verified = true
      vm.gui = true
      #vm.vmx["virtualHW.version"] = "10"
      vm.vmx["displayName"] = "#{VM_NAME}-instance-2"
      vm.vmx["memsize"] = "8192"
      vm.vmx["numvcpus"] = "4"
      vm.vmx["cpuid.coresPerSocket"] = "1"
      vm.vmx["vhv.enable"] = "TRUE"  # Enable virtualization engine (nested virtualization)
      #vm.vmx["hypervisor.cpuid.v0"] = "FALSE"  # Ensure guest OS can see CPU features
      #vm.vmx["monitor.virtual_mmu"] = "hardware"  # Use hardware memory management unit
      #vm.vmx["monitor.virtual_exec"] = "hardware"  # Use hardware execution virtualization
    end

    # VirtualBox configuration
    vm_config.vm.provider "virtualbox" do |vb|
      vb.linked_clone = true
      vb.name = "#{VM_NAME}-instance-2"
      vb.memory = "2048"
      vb.cpus = 2
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      vb.customize ["modifyvm", :id, "--vrde", "off"]  # Disable VRDE
      vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
      vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
      vb.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
    end

    # Network configuration
    config.vm.network "public_network", ip: "192.168.0.131", netmask: "255.255.255.0", mode: "bridge", bridge: [
                                          "Intel(R) I211 Gigabit Network Connection",
                                          "MediaTek Wi-Fi 6 MT7921 Wireless LAN",
                                        ] ### NETWORK_CONFIG_PLACEHOLDER

    # cloud-init
    vm_config.vm.provision "shell", name: "[cloud-init]", path: "../../scripts/commons/cloud-init.sh", privileged: false

    # Conditional provisioning scripts based on box name
    if BOX_NAME == "silvestrini-rocky9"
      vm_config.vm.provision "shell", name: "Rocky Provision", path: "../../scripts/rocky/test.sh", privileged: false
    elsif BOX_NAME == "silvestrini-ol9"
      vm_config.vm.provision "shell", name: "OL9 Provision", path: "../../scripts/ol9/test.sh", privileged: false
    elsif BOX_NAME == "gutehall/debian12"
      vm_config.vm.provision "shell", name: "Debian 12 Provision", path: "../../scripts/xen/debian.sh", privileged: false
    else
      raise "Unknown box name: #{BOX_NAME}"
    end
    #vm_config.vm.provision :reload
  end
  # end instance 2
end
