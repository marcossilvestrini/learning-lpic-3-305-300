# -*- mode: ruby -*-
# vi: set ft=ruby :

# Enable the experimental disks feature via environment variable, requires Vagrant >=2.2.8.
ENV["VAGRANT_EXPERIMENTAL"] = "1"

# Require for create disks
require "fileutils"

# INSTALL PLUGINS
required_plugins = ["vagrant-vmware-desktop", "vagrant-reload", "vagrant-vbguest", "vagrant-disksize"]
required_plugins.each do |plugin|
  unless Vagrant.has_plugin?(plugin)
    system "vagrant plugin install #{plugin}"
    puts "Installed the #{plugin} plugin."
  end
end

# GLOBAL VARIABLES
VDISKMANAGER = "E:\\Apps\\VMWare\\vmware-vdiskmanager.exe"

Vagrant.configure("2") do |config|

  # BOX
  #config.vm.box = "gutehall/debian12"
  config.vm.box = "bento/ubuntu-24.04"
  config.vm.box_version = "202407.23.0"

  ## GUEST CONFIG
  config.vbguest.auto_update = false
  config.vbguest.no_install = true
  config.vbguest.no_remote = true
  config.vm.box_download_insecure = true

  # LOCAL VARIABLES
  VM_NAME = "lpic3-topic-351-test"
  BOX_NAME = "gutehall/debian12"

  # # MOUNTS
  # config.vm.synced_folder ".", "/vagrant", disabled: true
  # config.vm.synced_folder "../../../scripts/", "/home/vagrant/scripts"
  # config.vm.synced_folder "../../../configs/", "/home/vagrant/configs"
  # config.vm.synced_folder "../../../security/", "/home/vagrant/security"

  # begin instance 1
  config.vm.define "#{VM_NAME}-instance-1" do |instance1|

    # Provider
    instance1.vm.provider :vmware_workstation

    # Disk
    instance1.vm.disk :disk, size: "100GB", primary: false

    # ## TRIGGER FOR CREATE ADDITIONAL DISKS - vagrant up
    # instance1.trigger.before :up do |trigger|
    #   trigger.name = "Create additional disks"
    #   trigger.ruby do |env, machine|
    #     XEN_VAGRANT_STORAGE = "E:\\Servers\\VMWare\\Storage\\#{VM_NAME}-instance-1"
    #     XEN_ADDITIONAL_DISKS = [
    #       { filename: "#{VM_NAME}-instance-1-disk1.vmdk", size_gb: 100 },
    #     ]
    #     dir = XEN_VAGRANT_STORAGE
    #     unless File.directory?(dir)
    #       FileUtils.mkdir_p dir
    #     end
    #     XEN_ADDITIONAL_DISKS.each do |disk|
    #       file_to_disk = "#{dir}/#{disk[:filename]}"
    #       unless File.exist?(file_to_disk)
    #         `#{VDISKMANAGER} -c -s #{disk[:size_gb]}GB -a lsilogic -t 1 #{file_to_disk}`
    #       end
    #       machine.provider_config.vmx["scsi0:1.filename"] = file_to_disk
    #       machine.provider_config.vmx["scsi0:1.present"] = "TRUE"
    #       machine.provider_config.vmx["scsi0:1.redo"] = ""
    #     end
    #   end
    # end

    # hostname
    instance1.vm.hostname = "#{VM_NAME}-instance-1"

    # VMware Workstation configuration
    instance1.vm.provider "vmware_workstation" do |vm|
      vm.linked_clone = true
      vm.clone_directory = "E:\\Servers\\VMWare\\#{VM_NAME}-instance-1"
      vm.whitelist_verified = true
      vm.gui = true
      vm.vmx["virtualHW.version"] = "10"
      vm.vmx["displayName"] = "#{VM_NAME}-instance-1"
      vm.vmx["memsize"] = "4096"
      vm.vmx["numvcpus"] = "2"
      vm.vmx["cpuid.coresPerSocket"] = "1"
      vm.vmx["vhv.enable"] = "TRUE"  # Enable virtualization engine (nested virtualization)
    end

    # VirtualBox configuration
    instance1.vm.provider "virtualbox" do |vb|
      vb.linked_clone = true
      vb.name = "#{VM_NAME}-instance-1"
      vb.memory = "2048"
      vb.cpus = 2
      vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
      vb.customize ["modifyvm", :id, "--vrde", "off"]  # Disable VRDE
      vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
      vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
      vb.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
    end

    # Network configuration
    instance1.vm.network "public_network", mode: "bridge", auto_config: false
    # manual ip
    instance1.vm.provision "shell",
      run: "always",
      inline: "ifconfig eth1 192.168.0.133 netmask 255.255.255.0 up"
    # default router
    instance1.vm.provision "shell",
      run: "always",
      inline: "route add default gw 192.168.0.1"
    # delete default gw on eth0
    instance1.vm.provision "shell",
      run: "always",
      inline: "eval `route -n | awk '{ if ($8 ==\"eth0\" && $2 != \"0.0.0.0\") print \"route del default gw \" $2; }'`"

    # cloud-init
    # instance1.vm.provision "shell", name: "[cloud-init]", path: "../../../scripts/commons/cloud-init.sh", privileged: false

    # # Conditional provisioning scripts based on box name
    # if BOX_NAME == "silvestrini-rocky9"
    #   instance1.vm.provision "shell", name: "Rocky Provision", path: "../../scripts/rocky/test.sh", privileged: false
    # elsif BOX_NAME == "silvestrini-ol9"
    #   instance1.vm.provision "shell", name: "OL9 Provision", path: "../../scripts/ol9/test.sh", privileged: false
    # elsif BOX_NAME == "gutehall/debian12"
    #   instance1.vm.provision "shell", name: "Debian 12 Provision", path: "../../scripts/xen/debian.sh", privileged: false
    # else
    #   raise "Unknown box name: #{BOX_NAME}"
    # end
    #instance1.vm.provision :reload
  end
  # end instance 1

  # begin instance 2
  # config.vm.define "#{VM_NAME}-instance-2" do |instance2|

  #   # hostname
  #   instance2.vm.hostname = "#{VM_NAME}-instance-2"

  #   # VMware Workstation configuration
  #   instance2.vm.provider "vmware_workstation" do |vm|
  #     vm.linked_clone = true
  #     vm.clone_directory = "E:\\Servers\\VMWare\\#{VM_NAME}-instance-2"
  #     vm.whitelist_verified = true
  #     #vm.gui = true
  #     #vm.vmx["virtualHW.version"] = "10"
  #     vm.vmx["displayName"] = "#{VM_NAME}-instance-2"
  #     vm.vmx["memsize"] = "8192"
  #     vm.vmx["numvcpus"] = "4"
  #     vm.vmx["cpuid.coresPerSocket"] = "1"
  #     vm.vmx["vhv.enable"] = "TRUE"  # Enable virtualization engine (nested virtualization)
  #     #vm.vmx["hypervisor.cpuid.v0"] = "FALSE"  # Ensure guest OS can see CPU features
  #     #vm.vmx["monitor.virtual_mmu"] = "hardware"  # Use hardware memory management unit
  #     #vm.vmx["monitor.virtual_exec"] = "hardware"  # Use hardware execution virtualization
  #   end

  #   # VirtualBox configuration
  #   instance2.vm.provider "virtualbox" do |vb|
  #     vb.linked_clone = true
  #     vb.name = "#{VM_NAME}-instance-2"
  #     vb.memory = "2048"
  #     vb.cpus = 2
  #     vb.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
  #     vb.customize ["modifyvm", :id, "--vrde", "off"]  # Disable VRDE
  #     vb.customize ["modifyvm", :id, "--graphicscontroller", "vmsvga"]
  #     vb.customize ["modifyvm", :id, "--accelerate3d", "on"]
  #     vb.customize ["modifyvm", :id, "--nested-hw-virt", "on"]
  #   end

  #   # Network configuration
  #   instance2.vm.network "public_network", mode: "bridge", auto_config: false
  #   # manual ip
  #   instance2.vm.provision "shell",
  #     run: "always",
  #     inline: "ifconfig eth1 192.168.0.131 netmask 255.255.255.0 up"
  #   # default router
  #   instance2.vm.provision "shell",
  #     run: "always",
  #     inline: "route add default gw 192.168.0.1"
  #   # delete default gw on eth0
  #   instance2.vm.provision "shell",
  #     run: "always",
  #     inline: "eval `route -n | awk '{ if ($8 ==\"eth0\" && $2 != \"0.0.0.0\") print \"route del default gw \" $2; }'`"

  #   # cloud-init
  #   instance2.vm.provision "shell", name: "[cloud-init]", path: "../../scripts/commons/cloud-init.sh", privileged: false

  #   # Conditional provisioning scripts based on box name
  #   if BOX_NAME == "silvestrini-rocky9"
  #     instance2.vm.provision "shell", name: "Rocky Provision", path: "../../scripts/rocky/test.sh", privileged: false
  #   elsif BOX_NAME == "silvestrini-ol9"
  #     instance2.vm.provision "shell", name: "OL9 Provision", path: "../../scripts/ol9/test.sh", privileged: false
  #   elsif BOX_NAME == "gutehall/debian12"
  #     instance2.vm.provision "shell", name: "Debian 12 Provision", path: "../../scripts/xen/debian.sh", privileged: false
  #   else
  #     raise "Unknown box name: #{BOX_NAME}"
  #   end
  #   #instance2.vm.provision :reload
  # end
  # end instance 2
end
